import OpenAI from 'openai'
import { Link } from '../generate'

const examples = [
  // eslint-disable-next-line quotes
  {"title":"Changelog: real-time live config and updating player data","description":"Discover new Talo features: real-time live config updates and the ability to update player stats and leaderboard scores from the dashboard.","date":"2025-01-27T09:00:00.000Z","readingTime":2,"author":{"name":"Tudor","avatar":"tudor.jpg"},"slug":"changelog-january-2025","content":"\n## TL;DR\n\n- **What's new?** Update player stats and leaderboard scores directly from the dashboard.\n- **What's changed?** Real-time live config updates are now supported in your game.\n\n## January 2025 overview\n\nWe’re kicking off 2025 with some exciting updates to Talo! This month, we’ve delivered highly requested features, enhanced our dashboard, and updated both the [Godot plugin](/godot) and [Unity package](/unity) to support powerful socket-based functionality.\n\n## Dashboard updates\n\n- **Update player stats**: You can now edit player stat values directly from the dashboard. Just head to a player’s profile, locate the stat you want to change, and edit it on the spot.\n\n  ![](/blog/changelog-january-2025/editing-stat.webm)\n\n- **Edit leaderboard scores**: Leaderboard scores can now also be updated straight from the dashboard, either through a player’s profile or on the leaderboard's entries page.\n\n  ![](/blog/changelog-january-2025/editing-score.webm)\n\n- **Improved leaderboard permissions**: We’ve tightened leaderboard permissions to ensure only admin users can edit, hide, or unhide leaderboard entries.\n\n## Backend updates\n\n- **New socket ticketing system**: Our sockets now use a secure ticketing system for authentication, replacing the less-supported header-based approach. This makes Talo Socket compatible with browser-based games in addition to desktop.\n\n- **Enhanced socket observability**: We’ve added background analytics for the Talo Socket, tracking events like connections, disconnections, errors, and more. Soon, these insights will be available in the Talo dashboard, helping you monitor socket activity in your game.\n\n## Godot plugin updates\n\n- **Real-time live config updates**: The Godot plugin now supports real-time [live config](/live-config) updates. This means any changes made in the dashboard are instantly reflected in your game. To start, connect to the `game_config.live_config_updated` signal. Check out the [Godot live config docs](https://docs.trytalo.com/docs/godot/live-config) for more info.\n- **Docs link in the Playground**: The Godot Playground now includes a link to the [docs](https://docs.trytalo.com), making it easier to find the information you need.\n- **Find player by ID**: We've added a new `Talo.players.find()` function, making it easier to find a player by their unique ID.\n\nWe’re also thrilled to announce that the [Godot plugin repository](https://github.com/TaloDev/godot-plugin) has reached 50 ⭐ stars! Thank you to everyone who’s supported or contributed.\n\n## Unity package updates\n\n- **Real-time live config updates**: The Unity package now supports real-time live config updates too. Simply subscribe to the `GameConfig.OnLiveConfigUpdated` event to start receiving updates. For a full guide, visit the [Unity live config docs](https://docs.trytalo.com/docs/unity/live-config).\n- **Docs link in the Playground**: The Unity Playground now includes a link to the [docs](https://docs.trytalo.com), making it easier to find the information you need.\n- **Find player by ID**: The new `Talo.Players.Find()` function makes it easier to find a player by their unique ID.\n\n## Sponsor us on GitHub!\n\nWe’re now part of the GitHub Sponsors program! You can [support us on GitHub](https://github.com/sponsors/TaloDev), helping us continue building Talo and supporting indie developers and small teams.\n\nWhile Talo does offer paid pricing tiers, they’re designed to be affordable for smaller teams, so we rely on sponsors to help sustain development. Sponsors get access to exclusive rewards like shaping our roadmap, dedicated support and even assistance with setting up self-hosted Talo infrastructure.\n\n## What’s next?\n\nWe’re hard at work on **Channels**, our real-time messaging system, and adding tools to create and manage channels from the dashboard. We’re also introducing a new **Presence API**, allowing you to track the online status of players in your game.\n\nWe’d love to hear your thoughts and ideas. Join our growing community on [Discord](/discord) and let us know what you think!\n"},
  // eslint-disable-next-line quotes
  {"title":"Levelling up your game with Talo’s Player Groups","description":"Learn more about all the ways to segment your players and understand them better with Talo’s powerful group filtering system.","date":"2024-12-02T10:00:00.000Z","readingTime":5,"author":{"name":"Tudor","avatar":"tudor.jpg"},"slug":"player-group-segments","content":"\nTraditionally, understanding your player base when developing a game, especially when you're in a rush, has come down to guesswork and opinions from the loudest voices in your community. While this kind of data is valuable in its own way, it's not always the most accurate or representative of your player base as a whole.\n\nWith Talo, you can create segments (or groups) within your player base based on what matters to you. These groups can be based on anything from player behaviour to in-game achievements, and they can be used to tailor your game experience to different types of players.\n\nBy measuring how many players each group contains, you can get a better understanding of your player base and make more informed decisions about how to improve your game. Here's how you can use Talo's Player Groups to level up your game:\n\n## TL;DR\n\nTalo Player Groups are a powerful way to segment your player base based on a wide range of criteria. You can easily see how many players are in each group and use this information to make data-driven decisions about your Godot game.\n\n## What are Player Groups?\nIn Talo, Player Groups are a collection of filters applied to your player base. They can filter on when players last logged in, [their properties](https://trytalo.com/players#props) or even [stat values](https://trytalo.com/stats) and [leaderboard scores](https://trytalo.com/leaderboards).\n\nHere are some example groups you can create with Talo:  \n- An \"active players\" group for players who have logged in during the last month.  \n- A group for players who have logged in during a limited-time event.  \n- An \"end game\" players group for players who are at max level or have completed the final level.\n- A \"speedrunners\" group for players who have finished your game in a short amount of time.\n- A group for players who have found a specific amount or all of the secrets in your game.  \n\nAfter defining your filter criteria, Talo keeps track of which players belong to each group. This can be visualised in the dashboard so you can drill-down into each player profile, or you can use the API to unlock in-game events based on a player's group status.\n\n![](/blog/changelog-november-2024/new-groups.webm)\n\n## Why use groups?\n\nGroups are a great way of measuring specific metrics. Taking the \"speedrunners\" group for example, if you see a large number of players in this group, you could tweak your game's difficulty. If you see a small number of players in the \"end game\" group, you might want to tweak the content of your game so that more players reach the end.\n\nThere's also a number of other ways in which you can benefit from creating groups:\n\n1. **Easier exclusive content**: groups makes it significantly easier to simply reward players in a specific group with exclusive content in comparison to having to implement complex logic in your game.\n2. **Encourage exploration**: you can engage your community in a more meaningful way by encouraging players to join others who have already discovered all the secrets in your game.\n3. **Understand what events work**: you can accurately measure the impact of limited time events and determine the best times to run them.\n4. **Revive inactive players**: you can create a group for players who haven't logged in for a while and offer them some form of incentive to return. Again, this is much easier to do with groups rather than building complex logic yourself.\n5. **Showcase the best players**: Talo makes it easy to find the best players in your game and groups makes it even easier to give them shout-outs.\n\nOverall, groups offer a level of personalisation that would otherwise be complex and time-consuming to implement. Groups save you that time so you can focus on building a great game.\n\n## How it works in Talo\n\nGroups are configured in the [Talo dashboard](https://dashboard.trytalo.com). Once you've created your game, Talo will sync group membership every time a property in your filters changes - you won't need to worry about keeping track of this yourself.\n\nYou can configure groups to also be \"public\". Public groups can be queried by the Talo API to list the players in that group.\n\n![A list of player groups in the Talo dashboard](/blog/player-group-segments/groups-list.png)\n\n### Unity and Godot integration\nIf you’re building your game with Unity or Godot, Talo’s [Godot plugin](https://trytalo.com/godot) and [Unity package](https://trytalo.com/unity) make it incredibly easy to use groups in your game. All players are populated with group data (the ID and name) and additional group data can be fetched to list group memberships.\n\nFor example, if you wanted to get a list of available levels for players but add an extra level for the \"Explorers\" group, you could do something like this:  \n\nIn **Unity** with the Talo package:  \n```csharp\nvar levels = new List<string> { \"Level 1\", \"Level 2\", \"Level 3\" };\nif (Talo.CurrentPlayer.IsInGroupName(\"Explorers\"))\n{\n    levels.Add(\"Secret Level\");\n}\n```\n\nIn **Godot** with the Talo plugin:\n```gdscript\nvar levels: Array[String] = [\"Level 1\", \"Level 2\", \"Level 3\"]\nif Talo.current_player.is_in_talo_group(\"Explorers\"):\n    levels.append(\"Secret Level\")\n```\n\nVisit the [Godot plugin group docs](https://docs.trytalo.com/docs/godot/groups) or the [Unity package group docs](https://docs.trytalo.com/docs/unity/groups) for more information on how to use groups in your game.\n\n### HTTP API for custom integrations\n\nTalo is also available to use via the [HTTP API](https://docs.trytalo.com/docs/http/authentication). This gives you the flexibility to work with Talo regardless of what engine or programming language you're working with.\n\nCheck out the [Player group API docs](https://docs.trytalo.com/docs/http/player-group-api) for example requests and responses.\n\n## Better engagement, better oversight\n\nPlayer groups aren’t just about sorting players into buckets — they’re about being able to make data-driven decisions to improve your game.\n\nGroups are flexible and can work across all genres - whether you're building a platformer, a puzzle game, or a multiplayer shooter, groups can help you understand your player base better and make your game more engaging.\n\nReady to give it a try? Check out the [Talo documentation](https://docs.trytalo.com) to get up-and-running in minutes. Additionally, check out what Talo has to offer in terms of [player management](https://trytalo.com/players) to make it easier to understand your player base.\n\nIf you have any questions or need help getting started, join us on [Discord](https://trytalo.com/discord) and we'll be happy to help you out.\n"}
]

async function generateFrontmatterRules() {
  const prompt = [
    'Analyse the following example post JSON object to create a set of rules for an AI agent to follow when generating a frontmatter section for a blog post.',
    'Determine what keys should be used and what formats should be followed for an SEO-optimised frontmatter section.',
    'Only reply with a summary of the required fields and their formatting, do not suggest any keys that are not within the object.',
    `<example_json>${JSON.stringify(examples[0])}</example_json>`
  ].join('\n')

  const openai = new OpenAI({
    apiKey: process.env.OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
  })

  console.info('   1. Generating frontmatter rules')

  const response = await openai.chat.completions.create({
    model: 'openai/gpt-4o-mini',
    messages: [
      {
        role: 'user',
        content: prompt
      }
    ],
    max_tokens: 500,
  })

  return response.choices[0].message.content || 'No rules provided'
}

export async function generateStructurePrompt(linksToInclude: Link[]) {
  try {
    console.info('[3] Generating structure prompt')

    const generatePrompt = [
      'Please write a blog post using the context provided above. Reference the documentation and code examples where relevant to explain technical concepts.',
      'Use the content of the following example posts to guide the structure of your post:',
      `${examples.map((example, idx) => `<example_${idx}>${example.content}</example_${idx}>`).join('\n')}`,
      'Do not use the content of the example posts as part of your blog post, only use the structure and style as a guide.',
      '1. You should only respond with mdx code. Include the frontmatter and the content but no other text that is not part of the mdx code.',
      '2. Use the following frontmatter rules to generate the frontmatter attributes to use in the blog post. Do not include any other keys and closely follow the formatting rules:',
      `<frontmatter_rules>${await generateFrontmatterRules()}</frontmatter_rules>`,
      '3. Mark out potential sections for images and videos within the mdx code. These will be replaced with actual images and videos later.',
      '4. You should include the following links in the post:',
      `<links_to_include>${linksToInclude.map((link) => `- ${link.description}: ${link.url}`).join('\n')}</links_to_include>`,
      '5. Ensure to include some larger paragraphs of text in the post to enrich the content.'
    ].join('\n')

    return generatePrompt
  } catch (error) {
    console.error('Error in generateStructurePrompt:', error)
    return ''
  }
}
